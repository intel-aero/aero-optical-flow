// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file vehicle_command_.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _vehicle_command__H_
#define _vehicle_command__H_

// TODO Poner en el contexto.

#include <stdint.h>
#include <array>
#include <string>
#include <vector>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(vehicle_command__SOURCE)
#define vehicle_command__DllAPI __declspec( dllexport )
#else
#define vehicle_command__DllAPI __declspec( dllimport )
#endif // vehicle_command__SOURCE
#else
#define vehicle_command__DllAPI
#endif
#else
#define vehicle_command__DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

/*!
 * @brief This class represents the structure vehicle_command_ defined by the user in the IDL file.
 * @ingroup VEHICLE_COMMAND_
 */
class vehicle_command_
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport vehicle_command_();
    
    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~vehicle_command_();
    
    /*!
     * @brief Copy constructor.
     * @param x Reference to the object vehicle_command_ that will be copied.
     */
    eProsima_user_DllExport vehicle_command_(const vehicle_command_ &x);
    
    /*!
     * @brief Move constructor.
     * @param x Reference to the object vehicle_command_ that will be copied.
     */
    eProsima_user_DllExport vehicle_command_(vehicle_command_ &&x);
    
    /*!
     * @brief Copy assignment.
     * @param x Reference to the object vehicle_command_ that will be copied.
     */
    eProsima_user_DllExport vehicle_command_& operator=(const vehicle_command_ &x);
    
    /*!
     * @brief Move assignment.
     * @param x Reference to the object vehicle_command_ that will be copied.
     */
    eProsima_user_DllExport vehicle_command_& operator=(vehicle_command_ &&x);
    
    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    inline eProsima_user_DllExport void timestamp(uint64_t _timestamp)
    {
        m_timestamp = _timestamp;
    }

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    inline eProsima_user_DllExport uint64_t timestamp() const
    {
        return m_timestamp;
    }

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    inline eProsima_user_DllExport uint64_t& timestamp()
    {
        return m_timestamp;
    }
    /*!
     * @brief This function sets a value in member param5
     * @param _param5 New value for member param5
     */
    inline eProsima_user_DllExport void param5(double _param5)
    {
        m_param5 = _param5;
    }

    /*!
     * @brief This function returns the value of member param5
     * @return Value of member param5
     */
    inline eProsima_user_DllExport double param5() const
    {
        return m_param5;
    }

    /*!
     * @brief This function returns a reference to member param5
     * @return Reference to member param5
     */
    inline eProsima_user_DllExport double& param5()
    {
        return m_param5;
    }
    /*!
     * @brief This function sets a value in member param6
     * @param _param6 New value for member param6
     */
    inline eProsima_user_DllExport void param6(double _param6)
    {
        m_param6 = _param6;
    }

    /*!
     * @brief This function returns the value of member param6
     * @return Value of member param6
     */
    inline eProsima_user_DllExport double param6() const
    {
        return m_param6;
    }

    /*!
     * @brief This function returns a reference to member param6
     * @return Reference to member param6
     */
    inline eProsima_user_DllExport double& param6()
    {
        return m_param6;
    }
    /*!
     * @brief This function sets a value in member param1
     * @param _param1 New value for member param1
     */
    inline eProsima_user_DllExport void param1(float _param1)
    {
        m_param1 = _param1;
    }

    /*!
     * @brief This function returns the value of member param1
     * @return Value of member param1
     */
    inline eProsima_user_DllExport float param1() const
    {
        return m_param1;
    }

    /*!
     * @brief This function returns a reference to member param1
     * @return Reference to member param1
     */
    inline eProsima_user_DllExport float& param1()
    {
        return m_param1;
    }
    /*!
     * @brief This function sets a value in member param2
     * @param _param2 New value for member param2
     */
    inline eProsima_user_DllExport void param2(float _param2)
    {
        m_param2 = _param2;
    }

    /*!
     * @brief This function returns the value of member param2
     * @return Value of member param2
     */
    inline eProsima_user_DllExport float param2() const
    {
        return m_param2;
    }

    /*!
     * @brief This function returns a reference to member param2
     * @return Reference to member param2
     */
    inline eProsima_user_DllExport float& param2()
    {
        return m_param2;
    }
    /*!
     * @brief This function sets a value in member param3
     * @param _param3 New value for member param3
     */
    inline eProsima_user_DllExport void param3(float _param3)
    {
        m_param3 = _param3;
    }

    /*!
     * @brief This function returns the value of member param3
     * @return Value of member param3
     */
    inline eProsima_user_DllExport float param3() const
    {
        return m_param3;
    }

    /*!
     * @brief This function returns a reference to member param3
     * @return Reference to member param3
     */
    inline eProsima_user_DllExport float& param3()
    {
        return m_param3;
    }
    /*!
     * @brief This function sets a value in member param4
     * @param _param4 New value for member param4
     */
    inline eProsima_user_DllExport void param4(float _param4)
    {
        m_param4 = _param4;
    }

    /*!
     * @brief This function returns the value of member param4
     * @return Value of member param4
     */
    inline eProsima_user_DllExport float param4() const
    {
        return m_param4;
    }

    /*!
     * @brief This function returns a reference to member param4
     * @return Reference to member param4
     */
    inline eProsima_user_DllExport float& param4()
    {
        return m_param4;
    }
    /*!
     * @brief This function sets a value in member param7
     * @param _param7 New value for member param7
     */
    inline eProsima_user_DllExport void param7(float _param7)
    {
        m_param7 = _param7;
    }

    /*!
     * @brief This function returns the value of member param7
     * @return Value of member param7
     */
    inline eProsima_user_DllExport float param7() const
    {
        return m_param7;
    }

    /*!
     * @brief This function returns a reference to member param7
     * @return Reference to member param7
     */
    inline eProsima_user_DllExport float& param7()
    {
        return m_param7;
    }
    /*!
     * @brief This function sets a value in member command
     * @param _command New value for member command
     */
    inline eProsima_user_DllExport void command(uint16_t _command)
    {
        m_command = _command;
    }

    /*!
     * @brief This function returns the value of member command
     * @return Value of member command
     */
    inline eProsima_user_DllExport uint16_t command() const
    {
        return m_command;
    }

    /*!
     * @brief This function returns a reference to member command
     * @return Reference to member command
     */
    inline eProsima_user_DllExport uint16_t& command()
    {
        return m_command;
    }
    /*!
     * @brief This function sets a value in member target_system
     * @param _target_system New value for member target_system
     */
    inline eProsima_user_DllExport void target_system(uint8_t _target_system)
    {
        m_target_system = _target_system;
    }

    /*!
     * @brief This function returns the value of member target_system
     * @return Value of member target_system
     */
    inline eProsima_user_DllExport uint8_t target_system() const
    {
        return m_target_system;
    }

    /*!
     * @brief This function returns a reference to member target_system
     * @return Reference to member target_system
     */
    inline eProsima_user_DllExport uint8_t& target_system()
    {
        return m_target_system;
    }
    /*!
     * @brief This function sets a value in member target_component
     * @param _target_component New value for member target_component
     */
    inline eProsima_user_DllExport void target_component(uint8_t _target_component)
    {
        m_target_component = _target_component;
    }

    /*!
     * @brief This function returns the value of member target_component
     * @return Value of member target_component
     */
    inline eProsima_user_DllExport uint8_t target_component() const
    {
        return m_target_component;
    }

    /*!
     * @brief This function returns a reference to member target_component
     * @return Reference to member target_component
     */
    inline eProsima_user_DllExport uint8_t& target_component()
    {
        return m_target_component;
    }
    /*!
     * @brief This function sets a value in member source_system
     * @param _source_system New value for member source_system
     */
    inline eProsima_user_DllExport void source_system(uint8_t _source_system)
    {
        m_source_system = _source_system;
    }

    /*!
     * @brief This function returns the value of member source_system
     * @return Value of member source_system
     */
    inline eProsima_user_DllExport uint8_t source_system() const
    {
        return m_source_system;
    }

    /*!
     * @brief This function returns a reference to member source_system
     * @return Reference to member source_system
     */
    inline eProsima_user_DllExport uint8_t& source_system()
    {
        return m_source_system;
    }
    /*!
     * @brief This function sets a value in member source_component
     * @param _source_component New value for member source_component
     */
    inline eProsima_user_DllExport void source_component(uint8_t _source_component)
    {
        m_source_component = _source_component;
    }

    /*!
     * @brief This function returns the value of member source_component
     * @return Value of member source_component
     */
    inline eProsima_user_DllExport uint8_t source_component() const
    {
        return m_source_component;
    }

    /*!
     * @brief This function returns a reference to member source_component
     * @return Reference to member source_component
     */
    inline eProsima_user_DllExport uint8_t& source_component()
    {
        return m_source_component;
    }
    /*!
     * @brief This function sets a value in member confirmation
     * @param _confirmation New value for member confirmation
     */
    inline eProsima_user_DllExport void confirmation(uint8_t _confirmation)
    {
        m_confirmation = _confirmation;
    }

    /*!
     * @brief This function returns the value of member confirmation
     * @return Value of member confirmation
     */
    inline eProsima_user_DllExport uint8_t confirmation() const
    {
        return m_confirmation;
    }

    /*!
     * @brief This function returns a reference to member confirmation
     * @return Reference to member confirmation
     */
    inline eProsima_user_DllExport uint8_t& confirmation()
    {
        return m_confirmation;
    }
    /*!
     * @brief This function sets a value in member from_external
     * @param _from_external New value for member from_external
     */
    inline eProsima_user_DllExport void from_external(bool _from_external)
    {
        m_from_external = _from_external;
    }

    /*!
     * @brief This function returns the value of member from_external
     * @return Value of member from_external
     */
    inline eProsima_user_DllExport bool from_external() const
    {
        return m_from_external;
    }

    /*!
     * @brief This function returns a reference to member from_external
     * @return Reference to member from_external
     */
    inline eProsima_user_DllExport bool& from_external()
    {
        return m_from_external;
    }
    
    /*!
     * @brief This function returns the maximum serialized size of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(const vehicle_command_& data, size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;
    
private:
    uint64_t m_timestamp;
    double m_param5;
    double m_param6;
    float m_param1;
    float m_param2;
    float m_param3;
    float m_param4;
    float m_param7;
    uint16_t m_command;
    uint8_t m_target_system;
    uint8_t m_target_component;
    uint8_t m_source_system;
    uint8_t m_source_component;
    uint8_t m_confirmation;
    bool m_from_external;
};

#endif // _vehicle_command__H_