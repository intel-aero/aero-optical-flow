// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file optical_flow_.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "optical_flow_.h"

#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

optical_flow_::optical_flow_()
{
    m_timestamp = 0;
    m_pixel_flow_x_integral = 0.0;
    m_pixel_flow_y_integral = 0.0;
    m_gyro_x_rate_integral = 0.0;
    m_gyro_y_rate_integral = 0.0;
    m_gyro_z_rate_integral = 0.0;
    m_ground_distance_m = 0.0;
    m_integration_timespan = 0;
    m_time_since_last_sonar_update = 0;
    m_frame_count_since_last_readout = 0;
    m_gyro_temperature = 0;
    m_sensor_id = 0;
    m_quality = 0;
}

optical_flow_::~optical_flow_()
{
}

optical_flow_::optical_flow_(const optical_flow_ &x)
{
    m_timestamp = x.m_timestamp;
    m_pixel_flow_x_integral = x.m_pixel_flow_x_integral;
    m_pixel_flow_y_integral = x.m_pixel_flow_y_integral;
    m_gyro_x_rate_integral = x.m_gyro_x_rate_integral;
    m_gyro_y_rate_integral = x.m_gyro_y_rate_integral;
    m_gyro_z_rate_integral = x.m_gyro_z_rate_integral;
    m_ground_distance_m = x.m_ground_distance_m;
    m_integration_timespan = x.m_integration_timespan;
    m_time_since_last_sonar_update = x.m_time_since_last_sonar_update;
    m_frame_count_since_last_readout = x.m_frame_count_since_last_readout;
    m_gyro_temperature = x.m_gyro_temperature;
    m_sensor_id = x.m_sensor_id;
    m_quality = x.m_quality;
}

optical_flow_::optical_flow_(optical_flow_ &&x)
{
    m_timestamp = x.m_timestamp;
    m_pixel_flow_x_integral = x.m_pixel_flow_x_integral;
    m_pixel_flow_y_integral = x.m_pixel_flow_y_integral;
    m_gyro_x_rate_integral = x.m_gyro_x_rate_integral;
    m_gyro_y_rate_integral = x.m_gyro_y_rate_integral;
    m_gyro_z_rate_integral = x.m_gyro_z_rate_integral;
    m_ground_distance_m = x.m_ground_distance_m;
    m_integration_timespan = x.m_integration_timespan;
    m_time_since_last_sonar_update = x.m_time_since_last_sonar_update;
    m_frame_count_since_last_readout = x.m_frame_count_since_last_readout;
    m_gyro_temperature = x.m_gyro_temperature;
    m_sensor_id = x.m_sensor_id;
    m_quality = x.m_quality;
}

optical_flow_& optical_flow_::operator=(const optical_flow_ &x)
{
    m_timestamp = x.m_timestamp;
    m_pixel_flow_x_integral = x.m_pixel_flow_x_integral;
    m_pixel_flow_y_integral = x.m_pixel_flow_y_integral;
    m_gyro_x_rate_integral = x.m_gyro_x_rate_integral;
    m_gyro_y_rate_integral = x.m_gyro_y_rate_integral;
    m_gyro_z_rate_integral = x.m_gyro_z_rate_integral;
    m_ground_distance_m = x.m_ground_distance_m;
    m_integration_timespan = x.m_integration_timespan;
    m_time_since_last_sonar_update = x.m_time_since_last_sonar_update;
    m_frame_count_since_last_readout = x.m_frame_count_since_last_readout;
    m_gyro_temperature = x.m_gyro_temperature;
    m_sensor_id = x.m_sensor_id;
    m_quality = x.m_quality;
    
    return *this;
}

optical_flow_& optical_flow_::operator=(optical_flow_ &&x)
{
    m_timestamp = x.m_timestamp;
    m_pixel_flow_x_integral = x.m_pixel_flow_x_integral;
    m_pixel_flow_y_integral = x.m_pixel_flow_y_integral;
    m_gyro_x_rate_integral = x.m_gyro_x_rate_integral;
    m_gyro_y_rate_integral = x.m_gyro_y_rate_integral;
    m_gyro_z_rate_integral = x.m_gyro_z_rate_integral;
    m_ground_distance_m = x.m_ground_distance_m;
    m_integration_timespan = x.m_integration_timespan;
    m_time_since_last_sonar_update = x.m_time_since_last_sonar_update;
    m_frame_count_since_last_readout = x.m_frame_count_since_last_readout;
    m_gyro_temperature = x.m_gyro_temperature;
    m_sensor_id = x.m_sensor_id;
    m_quality = x.m_quality;
    
    return *this;
}

size_t optical_flow_::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t optical_flow_::getCdrSerializedSize(const optical_flow_& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void optical_flow_::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_timestamp;

    scdr << m_pixel_flow_x_integral;

    scdr << m_pixel_flow_y_integral;

    scdr << m_gyro_x_rate_integral;

    scdr << m_gyro_y_rate_integral;

    scdr << m_gyro_z_rate_integral;

    scdr << m_ground_distance_m;

    scdr << m_integration_timespan;

    scdr << m_time_since_last_sonar_update;

    scdr << m_frame_count_since_last_readout;

    scdr << m_gyro_temperature;

    scdr << m_sensor_id;

    scdr << m_quality;

}

void optical_flow_::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_timestamp;
    dcdr >> m_pixel_flow_x_integral;
    dcdr >> m_pixel_flow_y_integral;
    dcdr >> m_gyro_x_rate_integral;
    dcdr >> m_gyro_y_rate_integral;
    dcdr >> m_gyro_z_rate_integral;
    dcdr >> m_ground_distance_m;
    dcdr >> m_integration_timespan;
    dcdr >> m_time_since_last_sonar_update;
    dcdr >> m_frame_count_since_last_readout;
    dcdr >> m_gyro_temperature;
    dcdr >> m_sensor_id;
    dcdr >> m_quality;
}

size_t optical_flow_::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            














    return current_align;
}

bool optical_flow_::isKeyDefined()
{
    return false;
}

void optical_flow_::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
}