// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file vehicle_command_.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "vehicle_command_.h"

#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

vehicle_command_::vehicle_command_()
{
    m_timestamp = 0;
    m_param5 = 0.0;
    m_param6 = 0.0;
    m_param1 = 0.0;
    m_param2 = 0.0;
    m_param3 = 0.0;
    m_param4 = 0.0;
    m_param7 = 0.0;
    m_command = 0;
    m_target_system = 0;
    m_target_component = 0;
    m_source_system = 0;
    m_source_component = 0;
    m_confirmation = 0;
    m_from_external = false;
}

vehicle_command_::~vehicle_command_()
{
}

vehicle_command_::vehicle_command_(const vehicle_command_ &x)
{
    m_timestamp = x.m_timestamp;
    m_param5 = x.m_param5;
    m_param6 = x.m_param6;
    m_param1 = x.m_param1;
    m_param2 = x.m_param2;
    m_param3 = x.m_param3;
    m_param4 = x.m_param4;
    m_param7 = x.m_param7;
    m_command = x.m_command;
    m_target_system = x.m_target_system;
    m_target_component = x.m_target_component;
    m_source_system = x.m_source_system;
    m_source_component = x.m_source_component;
    m_confirmation = x.m_confirmation;
    m_from_external = x.m_from_external;
}

vehicle_command_::vehicle_command_(vehicle_command_ &&x)
{
    m_timestamp = x.m_timestamp;
    m_param5 = x.m_param5;
    m_param6 = x.m_param6;
    m_param1 = x.m_param1;
    m_param2 = x.m_param2;
    m_param3 = x.m_param3;
    m_param4 = x.m_param4;
    m_param7 = x.m_param7;
    m_command = x.m_command;
    m_target_system = x.m_target_system;
    m_target_component = x.m_target_component;
    m_source_system = x.m_source_system;
    m_source_component = x.m_source_component;
    m_confirmation = x.m_confirmation;
    m_from_external = x.m_from_external;
}

vehicle_command_& vehicle_command_::operator=(const vehicle_command_ &x)
{
    m_timestamp = x.m_timestamp;
    m_param5 = x.m_param5;
    m_param6 = x.m_param6;
    m_param1 = x.m_param1;
    m_param2 = x.m_param2;
    m_param3 = x.m_param3;
    m_param4 = x.m_param4;
    m_param7 = x.m_param7;
    m_command = x.m_command;
    m_target_system = x.m_target_system;
    m_target_component = x.m_target_component;
    m_source_system = x.m_source_system;
    m_source_component = x.m_source_component;
    m_confirmation = x.m_confirmation;
    m_from_external = x.m_from_external;
    
    return *this;
}

vehicle_command_& vehicle_command_::operator=(vehicle_command_ &&x)
{
    m_timestamp = x.m_timestamp;
    m_param5 = x.m_param5;
    m_param6 = x.m_param6;
    m_param1 = x.m_param1;
    m_param2 = x.m_param2;
    m_param3 = x.m_param3;
    m_param4 = x.m_param4;
    m_param7 = x.m_param7;
    m_command = x.m_command;
    m_target_system = x.m_target_system;
    m_target_component = x.m_target_component;
    m_source_system = x.m_source_system;
    m_source_component = x.m_source_component;
    m_confirmation = x.m_confirmation;
    m_from_external = x.m_from_external;
    
    return *this;
}

size_t vehicle_command_::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t vehicle_command_::getCdrSerializedSize(const vehicle_command_& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void vehicle_command_::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_timestamp;

    scdr << m_param5;

    scdr << m_param6;

    scdr << m_param1;

    scdr << m_param2;

    scdr << m_param3;

    scdr << m_param4;

    scdr << m_param7;

    scdr << m_command;

    scdr << m_target_system;

    scdr << m_target_component;

    scdr << m_source_system;

    scdr << m_source_component;

    scdr << m_confirmation;

    scdr << m_from_external;

}

void vehicle_command_::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_timestamp;
    dcdr >> m_param5;
    dcdr >> m_param6;
    dcdr >> m_param1;
    dcdr >> m_param2;
    dcdr >> m_param3;
    dcdr >> m_param4;
    dcdr >> m_param7;
    dcdr >> m_command;
    dcdr >> m_target_system;
    dcdr >> m_target_component;
    dcdr >> m_source_system;
    dcdr >> m_source_component;
    dcdr >> m_confirmation;
    dcdr >> m_from_external;
}

size_t vehicle_command_::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            
















    return current_align;
}

bool vehicle_command_::isKeyDefined()
{
    return false;
}

void vehicle_command_::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
}